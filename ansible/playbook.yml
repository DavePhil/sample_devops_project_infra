---
- name: Configure Server
  hosts: servers
  become: yes
  tasks:
    - name: Install Nginx
      apt:
        name: nginx
        state: latest
        update_cache: yes

    - name: Start and enable Nginx
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Configure Nginx for proxying /myapp to port 8080
      copy:
        dest: /etc/nginx/sites-available/default
        content: |
          server {
            listen 80;
            server_name localhost;
        
            location /myapp {
                proxy_pass http://localhost:8080;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
            }
          
            location / {
                root /var/www/html;
                index index.html index.htm;
            }
          }
      notify:
        - Restart Nginx

    - name: Ensure correct permissions for /var/www/html
      file:
        path: /var/www/html
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Install Docker dependencies
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - lsb-release
        - software-properties-common

    - name: Add Docker GPG key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

    - name: Add Docker repository
      shell: sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

    - name: Install Docker
      apt:
        name: docker-ce
        state: latest
        update_cache: yes

    - name: Start and enable Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Log in to Docker Hub
      shell: sudo docker login -u "{{ docker_user_name }}" -p "{{ dockerhub_pwd }}"

    - name: Pull the Docker image
      shell: sudo docker pull "{{ image_name }}"

    - name: Remove existing container
      shell: sudo docker container rm -f test_pipeline || true

    - name: Run the Docker container
      shell: sudo docker run -d -p 8080:8080 --name test_pipeline "{{ image_name }}"


  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
